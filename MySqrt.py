'''
Author: Harshil Shah
Q. Use the power series expansion method to implement sqrt(x).
a. Your sqrt function should work for any input number.
b. Demo your sqrt function with some very good and some not very good input numbers
'''


class MySqrt:
    def __init__(self):
        self.factorialN = 1
        self.numerator = 0.5

    def find_coefficient(self, n):
        # Function for finding co-efficients for n term.

        # numerator is a value generated by performing derivation.
        # numerator and factorial variables' values are preserved. So we don't need to perform same calculations again.
        if n > 1:
            self.numerator *= (0.5 - (n-1))
        self.factorialN *= n
        coefficient = self.numerator / self.factorialN
        return coefficient

    def power_series(self, x, x_multiplier, number):
        if number < 0.4:
            # If number is less than 0.4 we need to divide by 4^x_multiplier
            multiplier = 1 / 4 ** x_multiplier
        else:
            # else we need to multiply 4^x_multiplier
            multiplier = 4 ** x_multiplier

        result = 1
        prev_result = result
        n = 1
        difference = 1
        while difference >= 0.00000001:
            result += self.find_coefficient(n) * (x - 1) ** n
            difference = abs(abs(prev_result) - abs(result)) * multiplier
            n += 1
            prev_result = result

        return result, n

    def find_sqrt(self, number):

        if number < 0:
            print("Invalid input number can't be negative.")
            return

        # Converting number value between 0.4 (inclusive) and 1.6 (exclusive).
        x = round(number, 6)
        x_multiplier = 0

        if number < 0.4:
            multiplier = 4
        else:
            multiplier = 0.25
        while x < 0.4 or x >= 1.6:
            x_multiplier += 1
            x *= multiplier

        result, n = self.power_series(x, x_multiplier, number)
        if number < 0.4:
            result /= 2 ** x_multiplier
        else:
            result *= 2 ** x_multiplier

        print("x=%.6f, n=%d" % (x, n))
        print('mysqrt(%.6f): %0.10f  Lib. sqrt(%.6f): %.10f'
              % (number, round(result, 10), number, round(number ** 0.5, 10)))


try:
    num = float(input("\nEnter a number (0 to exit): "))
    while num:
        obj = MySqrt()
        obj.find_sqrt(num)
        num = float(input("\nEnter a number (0 to exit): "))
except:
    print("Invalid input.")
